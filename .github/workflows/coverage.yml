name: Code coverage

on:
  pull_request:
    branches: ["main"]

jobs:
  coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0"

      - name: Restore dependencies
        run: dotnet restore


      - name: Ensure testsuite exists for all projects
        run: |
          missing=0
          while IFS= read -r project; do
          project_name=$(basename "$project" .csproj)

          #Skips Domain, since there is no testable logic
          if [[ "$project_name" == *.Domain ]]; then
            continue
          fi

          test_project="${project_name}.Tests.csproj"
          
          if ! find ./test -name "$test_project" -print -quit | grep -q .; then
            echo "::error::Missing testsuite for project: $project_name"
            missing=1
          fi
          done < <(find ./src -name "*.csproj") #Feeds loop, used instead of piping to avoid subshelling

          if [ $missing -eq 1 ]; then
            exit 1
          fi


      - name: Run tests with code coverage
        run: dotnet test --collect:"XPlat Code Coverage"

      - name: Generate HTML coverage report
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool || true
          export PATH="$PATH:$HOME/.dotnet/tools"
          reportgenerator -reports:"**/TestResults/*/coverage.cobertura.xml" -targetdir:"CoverageReport" -reporttypes:"HtmlInline;TextSummary" -assemblyfilters:"-*Tests" -filefilters:"-**/Migrations/*;-**/DbInitializer.cs;-**.cshtml"

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: CoverageReport

      - name: Ensure code coverage threshold
        run: |
          threshold=80
          reportSummary="CoverageReport/Summary.txt"

          if [ ! -f "$reportSummary" ]; then
            echo "::error::Summary not found at $reportSummary!"
            echo "List CoverageReport dir:"
            ls -la CoverageReport || true
            exit 1
          fi

          #Gets summary percantage value from the summary
          coveragePct=$(grep -oE '[0-9]+([.][0-9]+)?%' "$reportSummary" | head -n1 | tr -d '%' | bc -l)

          if [ -z "$coveragePct" ]; then
            echo "::error::Couldn't parse coverage percantage from $reportSummary!"
            exit 1
          fi

          echo "Coverage percent: $coveragePct (threshold: ${threshold}%)"

          if [ "$(echo "$coveragePct < $threshold" | bc -l)" -eq 1 ]; then
            echo "::error::Coverage not within threshold: ${coveragePct}% < ${threshold}%"
            exit 1
          fi

          echo "Coverage OK: ${coveragePct}% >= ${threshold}%"
