# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: ["main"]
    tags:
      - "v*"
  pull_request:
    branches: ["main"]

jobs:
  format:
    if: github.ref_type == 'branch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install dotnet-format
        run: dotnet tool install -g dotnet-format

      - name: Check formatting
        id: checkFormat
        continue-on-error: true
        run: dotnet format --verify-no-changes

      - name: Determine branch name
        id: branch
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}" >> $GITHUB_OUTPUT

      - name: Fix formatting & push
        if: steps.checkFormat.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "Auto Formatter"
          git config user.email "formatter@example.com"
          dotnet format
          git commit -a -m "Fix formatting"
          git push origin HEAD:${{ steps.branch.outputs.branch }}

  release:
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    if: github.ref_type == 'tag'
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rid: [linux-x64, linux-arm64, win-x64, win-arm64, osx-x64, osx-arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Publish for ${{ matrix.rid }}
        run: |
          dotnet publish src/Chirp.CLI/Chirp.CLI.csproj \
            -c Release \
            -r ${{ matrix.rid }} \
            -p:PublishSingleFile=false \
            -o publish/${{ matrix.rid }}

      - name: Ensure executable bit (Linux/macOS only)
        if: ${{ matrix.rid != 'win-x64'}}
        run: chmod +x publish/${{ matrix.rid }}/Chirp.CLI || true

      - name: Zip output
        run: |
          cd publish
          zip -r chirp-${{ matrix.rid }}.zip ${{ matrix.rid }}

      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: publish/chirp-${{ matrix.rid }}.zip
          asset_name: chirp-${{ matrix.rid }}.zip
          asset_content_type: application/zip
